# mysql setup
sudo systemctl status  mysql
sudo systemctl start mysql
sudo systemctl status  mysql    
sudo mysql -u root
create database healthnet;
use healthnet;
source /home/sjanarth/projects/sugar/api/src/main/resources/sugar_create.sql
source /home/sjanarth/projects/healthnet/api/src/main/resources/healthnet_create.sql

# mongo setup
sudo systemctl status mongodb
sudo systemctl start mongod
sudo systemctl status mongod
mongo --version
mongo
use healthnet
db.sugar_preferences.insertOne({"entityId":"5","type":"USER","name":"enableSSO","value":"true"})
db.sugar_preferences.find()
db.sugar_preferences.remove({})



# to compile sugar app
 mvn clean package -Dmaven.test.skip=true

# to run spring-boot app
mvn spring-boot:run

# to install core-react-ui
git clone https://github.com/coreui/coreui-free-react-admin-template.git ui
cd ui
npm install
https://www.javaguides.net/2020/07/react-js-spring-boot-rest-api-example-tutorial.html


    /*
    @Column(name="age", columnDefinition = "TINYINT(1)")
    private Integer age;

    @Column(name="sex", columnDefinition = "VARCHAR(1)")
    @Getter(AccessLevel.NONE) @Setter(AccessLevel.NONE)
    private String sex;
    public Sex getSex() { switch (sex) { case "M" : return Sex.MALE; case "F": return Sex.FEMALE; case "T": return Sex.TRANS_GENDER; } return null; }
    public void setSex(Sex s) { switch (s) { case MALE: sex = "M"; break; case FEMALE: sex = "F"; break; case TRANS_GENDER: sex = "T"; break; } }

    public enum Sex {
        MALE,
        FEMALE,
        TRANS_GENDER
    }

    @Column(name="height", columnDefinition = "SMALLINT")
    private Integer height;

    @Column(name="weight", columnDefinition = "SMALLINT")
    private Integer weight;
    */

    #`age` tinyint,
    #`sex` varchar(1),
    #`height` smallint,
    #`weight` smallint,


    @Override
    protected void configure(AuthenticationManagerBuilder auth) throws Exception {
        /*
        auth.inMemoryAuthentication()
                .withUser("user")
                .password("{noop}pass") // Spring Security 5 requires specifying the password storage format
                .roles("USER");
        */
        /*
        auth.jdbcAuthentication()
                .usersByUsernameQuery(USERS_QUERY)
                .authoritiesByUsernameQuery(ROLES_QUERY)
                .dataSource(dataSource)
                .passwordEncoder(bCryptPasswordEncoder);
         */
       //auth.userDetailsService(userDetailsService);
    }

    @Override
    protected void configure(HttpSecurity http) throws Exception{
        // http.authorizeRequests().anyRequest().permitAll();
        /*
        http.authorizeRequests()
                .anyRequest().authenticated()
                .and()
                .formLogin()
                .and()
                .httpBasic();
        */
        /*
        http
                .authorizeRequests()
                    .antMatchers("/", "/api/user/current").permitAll()
                    //.anyRequest().authenticated()
                    .and()
                .csrf()
                    .csrfTokenRepository(CookieCsrfTokenRepository.withHttpOnlyFalse())
                    .and()
                .formLogin();
        */
        /*
        http
                .authorizeRequests()
                    .antMatchers("/user/**").permitAll()
                    .antMatchers("/users").permitAll()
                    .antMatchers("/users/**").permitAll()
                    .antMatchers("/login").permitAll()
                    .antMatchers("/signup").permitAll()
                    .antMatchers("/admin/**").hasAuthority("ADMIN").anyRequest()
                .authenticated().and().csrf().disable()
                .formLogin().loginPage("/login").failureUrl("/login?error=true")
                .defaultSuccessUrl("/home/home")
                .usernameParameter("email")
                .passwordParameter("password")
                .and().logout()
                .logoutRequestMatcher(new AntPathRequestMatcher("/logout"))
                .logoutSuccessUrl("/")
                .and().rememberMe()
                .tokenRepository(persistentTokenRepository())
                .tokenValiditySeconds(60*60)
                .and().exceptionHandling().accessDeniedPage("/access_denied");
        */
    }

    @Bean
    public PersistentTokenRepository persistentTokenRepository() {
        JdbcTokenRepositoryImpl db = new JdbcTokenRepositoryImpl();
        db.setDataSource(dataSource);
        return db;
    }

    /*
    @Bean
    public RequestCache refererRequestCache() {
        return new HttpSessionRequestCache() {
            @Override
            public void saveRequest(HttpServletRequest request, HttpServletResponse response) {
                String referrer = request.getHeader("referer");
                if (referrer != null) {
                    request.getSession().setAttribute("SPRING_SECURITY_SAVED_REQUEST", new SimpleSavedRequest(referrer));
                }
            }
        };
    }
    */


    @Bean
    public AuthenticationSuccessHandler successHandler() {
        SavedRequestAwareAuthenticationSuccessHandler handler = new SavedRequestAwareAuthenticationSuccessHandler();
        //SimpleUrlAuthenticationSuccessHandler handler = new SimpleUrlAuthenticationSuccessHandler();
        //handler.setUseReferer(true);
        return handler;
    }
